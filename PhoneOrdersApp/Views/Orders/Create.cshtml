@{
    ViewData["Title"] = "Create Order";
}

<h2>Create New Order</h2>

<form method="post" asp-action="Create">
    <h3>Customer Info</h3>
    <label>Name:</label>
    <input type="text" name="customer.Name" required /><br />

    <label>Phone:</label>
    <input type="text" name="customer.Phone" /><br />

    <label>Address:</label>
    <input type="text" name="customer.Address" id="customer-address" /><br />

    <label>Note:</label>
    <input type="text" name="customer.Note" /><br />

    <h3>Products</h3>
    <div id="product-container">
    </div>

    <button type="button" onclick="addProduct()">+Add</button>
    <br /><br />

    <strong>Total: <span id="total-amount">0</span> Pound</strong>
    <br /><br />

    <button type="submit">Place Order</button>
</form>

@section Scripts {
    <script>
        let productIndex = 0;
        const maxProducts = 5;

        function addProduct() {
            if (productIndex >= maxProducts) return;

            const container = document.getElementById('product-container');
            const div = document.createElement('div');
            div.classList.add('product-row');
            div.innerHTML = `
                    <fieldset style="margin-bottom: 15px; padding:10px; border: 1px solid #ccc;">
                        <legend>Product ${productIndex + 1}</legend>
                        <label>Name:</label>
                        <input type="text" class="product-name" name="items[${productIndex}].ProductName"
                               oninput="searchProduct(this, ${productIndex})" list="products-list-${productIndex}" />
                        <datalist id="products-list-${productIndex}"></datalist>

                        <label>Quantity:</label>
                        <input type="number" name="items[${productIndex}].Quantity" value="1" min="1"
                               onchange="updatePriceFromQuantity(${productIndex})" />

                        <label>Price:</label>
                        <input type="number" name="items[${productIndex}].UnitPrice" step="0.01" class="price"
                               onchange="calculateTotal()" />

                        <button type="button" onclick="removeProduct(this)">🗑</button>
                    </fieldset>
                `;
            container.appendChild(div);
            productIndex++;
        }

        function removeProduct(button) {
            const div = button.closest('.product-row');
            div.remove();
            calculateTotal();
        }

        function calculateTotal() {
            let total = 0;
            document.querySelectorAll('.product-row').forEach(row => {
                const qty = parseFloat(row.querySelector('input[name$=".Quantity"]').value) || 0;
                const unitPrice = parseFloat(row.querySelector('input[name$=".UnitPrice"]').value) || 0;
                total += qty * unitPrice;
            });
            document.getElementById('total-amount').textContent = total.toLocaleString();
        }

        async function searchProduct(input, index) {
            const term = input.value;
            if (term.length < 2) return;

            const response = await fetch(`/api/products/search?term=${term}`);
            if (!response.ok) return;

            const data = await response.json();
            const datalist = document.getElementById(`products-list-${index}`);
            datalist.innerHTML = '';

            data.forEach(p => {
                const opt = document.createElement("option");
                opt.value = p.name;
                opt.setAttribute("data-price", p.price);
                datalist.appendChild(opt);
            });

            const exactMatch = data.find(p => p.name.toLowerCase() === term.toLowerCase());
            if (exactMatch) {
                applyProductPrice(index, exactMatch.price);
            }
        }

        function applyProductPrice(index, unitPrice) {
            const row = document.querySelectorAll('.product-row')[index];
            const qtyInput = row.querySelector('input[name$=".Quantity"]');
            const priceInput = row.querySelector('input[name$=".UnitPrice"]');

            const qty = parseInt(qtyInput.value || "1");
            priceInput.value = unitPrice.toFixed(2); 
            priceInput.setAttribute("data-baseprice", unitPrice);

            qtyInput.oninput = () => {
                updatePriceFromQuantity(index);
            };

            calculateTotal();
        }

        function updatePriceFromQuantity(index) {
            const row = document.querySelectorAll('.product-row')[index];
            const qtyInput = row.querySelector('input[name$=".Quantity"]');
            const priceInput = row.querySelector('input[name$=".UnitPrice"]');

            const basePrice = parseFloat(priceInput.getAttribute('data-baseprice'));
            const qty = parseInt(qtyInput.value || "1");

            if (!isNaN(basePrice)) {
                calculateTotal();
            }
        }
    </script>
}
